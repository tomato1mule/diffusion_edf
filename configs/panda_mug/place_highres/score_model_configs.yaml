model_name: 'MultiscaleScoreModel'
model_kwargs:
  score_head_kwargs:
    max_time: 1.
    time_emb_mlp: [256, 128, 64]
    ang_mult: 2.5
    lin_mult: 15.  # In centimeters
    edge_time_encoding: True
    query_time_encoding: False
    key_tensor_field_kwargs:
      irreps_output: '64x0e+32x1e+16x2e'
      irreps_sh: '1x0e+1x1e+1x2e'
      num_heads: 4
      fc_neurons: [-1, 128, 64]    # fc_neurons[0] must be equal to time_emb_dim and length_emb_dim
      length_emb_dim: 64          
      r_cluster_multiscale:        # In centimeters
        - 5.                       # Set higher value (like 6.) if unstable.
        - 10.
        - 20.
        - null
      n_layers: 1
      irreps_mlp_mid: 3
      cutoff_method: 'edge_attn'
      r_mincut_nonscalar_sh: 0.1    # In centimeters
      length_enc_max_r: 100.      # In centimeters

  key_kwargs:
    feature_extractor_name: 'UnetFeatureExtractor'
    feature_extractor_kwargs:
      irreps_input: '3x0e'
      irreps_output: '64x0e+32x1e+16x2e'
      n_scales: 4
      irreps_emb:           # mutiscale -> list length must match n_scales
        - '32x0e+16x1e+8x2e'
        - '32x0e+16x1e+8x2e'
        - '64x0e+32x1e+16x2e'
        - '64x0e+32x1e+16x2e'
      irreps_edge_attr:     # mutiscale -> list length must match n_scales
        - '1x0e+1x1e+1x2e'
        - '1x0e+1x1e+1x2e'
        - '1x0e+1x1e+1x2e'
        - '1x0e+1x1e+1x2e'
      num_heads:
        - 4
        - 4
        - 4
        - 4
      fc_neurons:           # mutiscale -> list length must match n_scales
        - [32, 16, 16]
        - [32, 16, 16]
        - [64, 32, 32]
        - [64, 32, 32]
      n_layers:             # mutiscale -> list length must match n_scales
        - 2
        - 2
        - 2
        - 2
      pool_ratio:           # Pooling ratio. For example, p=0.5 means the number of points are halved.
        - 0.2
        - 0.2
        - 0.2
        - 0.2
      radius:               # In centimeters; Maximum radius to connect neighboring nodes. If set to None, it will be set to 1/sqrt(p) of the previous layer's radius. Typically, this results in the number of edges being reduced by ratio p.
        - 3.                # Base radius must not be None
        - null
        - null
        - null
      irreps_mlp_mid: 3     # irreps multiplier for mlp, like that of transformers.
      pool_method: 'fps'
      attn_type: 'mlp'
      alpha_drop: 0.1       
      proj_drop: 0.1
      drop_path_rate: 0.0
      n_layers_midstream: 2 # Number of layers that connects downstream to upstream

  query_model: 'KeypointExtractor'
  query_kwargs:
    weight_activation: 'sigmoid'
    weight_mult: null
    keypoint_kwargs: 
      pool_ratio: 0.1
      weight_pre_emb_dim: 64
      bbox: [[-15.0, 15.0], [-15.0, 15.0], [8.0, 20.0]]  # In centimeters, [[x_min, x_max], [y_min, y_max], [z_min, z_max]]
    feature_extractor_kwargs:
      irreps_input: '3x0e'
      irreps_output: '64x0e+32x1e+16x2e'
      n_scales: 4
      irreps_emb:           # mutiscale -> list length must match n_scales
        - '32x0e+16x1e+8x2e'
        - '32x0e+16x1e+8x2e'
        - '64x0e+32x1e+16x2e'
        - '64x0e+32x1e+16x2e'
      irreps_edge_attr:     # mutiscale -> list length must match n_scales
        - '1x0e+1x1e+1x2e'
        - '1x0e+1x1e+1x2e'
        - '1x0e+1x1e+1x2e'
        - '1x0e+1x1e+1x2e'
      num_heads:
        - 4
        - 4
        - 4
        - 4
      fc_neurons:           # mutiscale -> list length must match n_scales
        - [32, 16, 16]
        - [32, 16, 16]
        - [64, 32, 32]
        - [64, 32, 32]
      n_layers:             # mutiscale -> list length must match n_scales
        - 2
        - 2
        - 2
        - 2
      pool_ratio:           # Pooling ratio. For example, p=0.5 means the number of points are halved.
        - 0.25
        - 0.25
        - 0.25
        - 0.25
      radius:               # Maximum radius to connect neighboring nodes. If set to None, it will be set to 1/sqrt(p) of the previous layer's radius. Typically, this results in the number of edges being reduced by ratio p.
        - 3.                # Base radius must not be None
        - null
        - null
        - null
      irreps_mlp_mid: 3     # irreps multiplier for mlp, like that of transformers.
      pool_method: 'fps'
      attn_type: 'mlp'
      alpha_drop: 0.1       
      proj_drop: 0.1
      drop_path_rate: 0.0
      n_layers_midstream: 2 # Number of layers that connects downstream to upstream
    tensor_field_kwargs:
      irreps_output: '64x0e+32x1e+16x2e'
      irreps_sh: '1x0e+1x1e+1x2e'
      num_heads: 4
      fc_neurons: [-1, 32, 32]    # fc_neurons[0] must be equal to time_emb_dim and length_emb_dim
      length_emb_dim: 64          
      r_cluster_multiscale: 
        - 5.
        - 10.
        - 20.
        - 40.
      n_layers: 1
      irreps_mlp_mid: 3
      cutoff_method: 'edge_attn'


